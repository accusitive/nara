
fn allocate_at<T>(location: (), value: T) -> &T {
//                          ^ '0       ^'1   ^'2

    let p: &T = value at location;
//         ^ '3 ==       ^ '0   
    p
    // '2 == '3

// lets call this 'a: '1
// lets call this 'r: '3 == '0 == '2 (all the same after unification)
// -> allocate_at<'r, 'a, T>(location: () @ 'r, value: T @ '1) -> (&T) @ 'r
}


fn some_math(location: (), base: i32 @ location, another: i32) -> i32 @ location {
    (base + another) at location
}
fn map<T, U>(value: T, mapper: fn(T @ value) -> U @ value) -> U @ value {
//                  ^'1        ^'2^'0   ^'1           ^'1 

    mapper(value) // -> U @ value
//                      ^1'
// implicitly considered as:
// fn map<'a, 'b, T, U>(value: T @ 'a, mapper: (fn(T @ 'a) -> U @ 'a) @ 'b) -> U @ 'a
// therefore a call like this:
/*
fn showcase() { // '0
    let value = new 42; // allocated in '0
    let wrapper = |x| { Option::Some(x) } // maybe 'global?
    let m = map(42, wrapper);
}

// regions passed like:
map<'0, 'global>(42, wrapper)

// hoisted into
fn wrapper_lifted<T>(x: T) -> Option<T> {
//                      ^'0          ^'0
    Option::Some(T)
}
*/
}
// open question: should i be parametric over types, or (type, region)
// should type Option<T> be fulfilled by Option<i32> or Option<i32 @ arena> ?

type Option<T> = {
    | Some(T)
//         ^'0
    | None
}


type Double<T> = {
    first: T,
    second: T
}
/* -> 
type Double<'a, 'b, T> = {
    first: T @ 'a,
    second: T @ 'b
}
*/
type OneAfterAnother<T> = {
    first: T,
    second: T @ first
}
fn test(arena: ()) -> Double {

}
// theoretically it can be inferred?
type Something {
    value: i32
}

// Maybe this setup?
fn ret_something(val: i32) -> Something { // { value: i32}
//                    ^'0                             ^'1
// remember, val not having an explicit region means that it introduces a new region, like rust's ret_something<'a>(val: i32 @ 'a) (although we dont have this syntax)
    Something {
        value: val // unify '1 of Something { value: '1 } = '0, therefore the ty is `Something { val: i32 @ '0}
    }
}